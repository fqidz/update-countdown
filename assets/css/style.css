:root {
    @media (prefers-color-scheme: dark) {
        --opposite-bg-color: 245, 245, 250;
        --main-bg-color: 23, 23, 27;
        --main-fg-color: 237, 236, 255;
        --dim-fg-color: 145, 144, 163;
        --spacer-fg-color: 29, 29, 33;
        --github-color: 255, 255, 255;
    }

    @media (prefers-color-scheme: light) {
        --opposite-bg-color: 23, 23, 27;
        --main-bg-color: 245, 245, 250;
        --main-fg-color: 10, 10, 15;
        --dim-fg-color: 118, 118, 123;
        --spacer-fg-color: 235, 235, 240;
        --github-color: 36, 41, 47;
    }
}

::selection {
    color: rgb(var(--main-bg-color));
    background: rgb(var(--opposite-bg-color));
}

*:focus-visible {
    outline-width: 2px;
    outline-offset: 5px;
    outline-color: rgb(var(--opposite-bg-color));
    outline-style: solid;
}

* {
    padding: 0px;
    margin: 0px;
    border: none;
}

.main-fg-color {
    color: rgb(var(--main-fg-color));
}

.dim-fg-color {
    color: rgb(var(--dim-fg-color));
}


html {
    background-color: rgb(var(--main-bg-color));
}

.font-roboto-mono {
    font-family: "Roboto Mono", monospace;
    font-optical-sizing: auto;
}

.font-roboto {
    font-family: "Roboto", sans-serif;
}

.font-title {
    font-weight: 800;
    font-style: normal;
}

.font-caption {
    font-weight: 600;
    font-style: normal;
}

.font-bold {
    font-weight: 700;
    font-style: bold;
}

.font-normal {
    font-weight: 400;
    font-style: normal;
}

.inline {
    display: inline;
}

.inline * {
    display: inline;
}

.blocky {
    display: grid;
    grid-template-columns: 1fr auto;
}

.blocky>* {
    justify-self: end;
}

.navbar {
    display: flex;
}

#github-link {
    padding: 5px;
    position: absolute;
    bottom: 30px;
    right: 30px;
}

#github-link>svg>path {
    fill: rgb(var(--github-color));
}

.main-container {
    display: flex;
    height: 100vh;
    height: 100svh;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* .main-container>* { */
/*     border: 1px solid #f00; */
/* } */

.display-container {
    align-self: center;
    margin: 2em 0;
    display: grid;
    row-gap: 3vw;
}

.display-container>* {
    width: fit-content;
    align-self: center;
    justify-self: center;
}

.datetime-container {
    /* width: 40vw; */
    display: grid;
    justify-items: center;
}

.datetime-container>* {
    width: fit-content;
    height: fit-content;
}

.caption-container {
    align-self: center;
    justify-self: center;
    margin: 0 clamp(1.5em, 8vw, 15em);
    font-size: clamp(0.8em, 2vw, 1.5em)
}

#countdown,
#datetime {
    white-space: nowrap;
}

#countdown {
    line-height: 0.8em;
}

.spacer {
    color: rgb(var(--spacer-fg-color));
}

.button-refresh-container {
    display: flex;
    width: 100%;
    align-self: flex-end;
    justify-content: center;
    align-items: center;
    bottom: 0;
    padding-top: 1vh;
    padding-bottom: 0.8vh;
}

button {
    background-color: transparent;
}

/* Stop the parent from being a few pixels bigger than the actual svg */
svg {
    display: block;
}

/* Matches devices that are using mouse */
/* TODO: check if this works with stylus */
@media (hover: hover) and (pointer: fine) {

    #countdown,
    #datetime {
        transition: filter 150ms ease-in;
    }

    /* On `Blocky` display, only select the actual countdown numbers and not
     * the spacers. */
    #countdown:hover [id^="countdown-"],
    #countdown:hover label {
        filter: brightness(85%);
        transition: filter 100ms ease-out;
    }

    #datetime:hover {
        filter: brightness(80%);
        transition: filter 75ms ease-out;
    }

    button#refresh>svg {
        /* fill: rgb(var(--main-fg-color)); */
        transition: rotate 75ms ease-in, filter 50ms linear;
    }

    button#refresh:hover>svg {
        /* fill: rgb(var(--dim-fg-color)); */
        filter: brightness(75%);
        rotate: 15deg;
        transition: rotate 75ms ease-out, filter 150ms linear;
    }
}

/* Matches touchscreens */
@media not ((hover: hover) and (pointer: fine)) {
    button#refresh:hover>svg {
        animation: 200ms ease-out refreshjump
    }
}

.user-count-container {
    position: absolute;
    display: flex;
    bottom: 35px;
    left: 35px;
}

.user-count-container>svg {
    fill: rgb(var(--dim-fg-color));
}

#user-count {
    padding-top: 1px;
}


@keyframes refresh {
    from {
        fill: rgb(var(--main-fg-color));
        transform: rotate(0deg);
    }

    to {
        fill: rgb(var(--dim-fg-color));
        transform: rotate(20deg);
    }

    /* 20%, 80% { */
    /*     fill: #505050; */
    /*     transform: rotate(20deg); */
    /* } */
}

@keyframes refreshjump {

    0%,
    100% {
        transform: translateY(0px) rotate(20deg);
    }

    40%,
    60% {
        transform: translateY(-10px) rotate(20deg);
    }
}

/* svg.animate { */
/*     animation: */
/*         200ms linear refresh */
/* } */
/**/
/* svg.animatejump { */
/*     animation: */
/*         200ms ease-in-out refreshjump */
/* } */
